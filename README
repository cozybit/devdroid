WHAT IS THIS?
#############

This is a first attempt to create a framework that helps deploy and debug an
android system and apps in multiple android devices.

It also has the flexibility of working with external projects that are not
included/integrated in the AOSP.

It was born as a set of scripts that help build and flash the Android
images on the phones, but it's moving to something more serious and useful.
Therefore it is still under heavy development.

DESCRIPTION
###########

+ config/ : set of configuration files that this framewrok uses
+ dev_apps/ : group of usefull apps that help development & debugging
+ scripts/ : set of scripts that help with some tedious tasks like flashing, etc.
+ tools/ : set of scripts used for very common operations.

HOW TO INSTALL IT
#################

In order to use this framework, you need to follow these three steps:

0 - Edit and customize the config files available in the config/ folder.
1 - Add the "DEVDROID=path_to_this_project" variable to your bashrc.
3 - Add ${DEVDROID}/tools to your path.


QUICK START
###########

Most useful commands: ant-dev, builstall, adbs and logcat-p

+ adbs: *super* adb. Allows you to execute an adb command against multiple devices
      secuentially. To target devices, it uses friendly names as CB01, CB02, etc.
      instead of those nasty serial numbers that nobody memorizes. Also, you won't
      have to care if the phone is connected via USB, TCPIP, etc.

      ie: "$ adbs -s CB01,CB02,CB03 remount"  or "$ adbs -s all remount"

+ ant-dev: allows you to build an Android project from cmd line, but adding extra
      info about your dev environment to the versionName attribute within the
      AndroidManifest. This way, you will always know what version of the you are
      testing.

      ie: "$ ant-dev debug"

      NOTE: it requires that the project has a git repository or it will fail.

+ builstall: builds and installs! As simple as it sounds..but extremly usefull.
      It will handle those cases where ceritificates are inconsistant and everything.
      It supports other features like: specify a build type (-t) or launch the app (-r).

      ie:
         "$ builstall -s CB01,CB02 -r" -->  it will build, install and launch the project.
         "$ builstall -s all -i" --> skips building, just installs.

+ logcat-p: prints the logcat output generated by a specific app. It uses app's PID in
      order to filter, so you will need to run the app before running the command.

      ie: "$ logcat-p -s CB01 -p com.cozybit.myapp"

      Also, if you run this command from the root of the project, you don't have to 
      specify the package name,
