#!/bin/bash

# GOAL: build, install and launch an android application 
#
# This script requires adbs working
#
# author: Guillermo A. Nunez <guillermo@cozybit.com>

# source common functions and parse options
source `dirname ${0}`/common.sh

# extract android:name value of tha activity with the action.MAIN intent filter
function extractMainActivityName () {
	i=1
	grep -B ${i} android.intent.action.MAIN AndroidManifest.xml | grep activity &> /dev/null
	while  [ $? -ne 0 -a ${i} -lt 100  ] ; do
		i=$((i+1))
		grep -B ${i} android.intent.action.MAIN AndroidManifest.xml | grep -e "<activity" &>/dev/null
	done

	[ ${i} -eq 100 ] && { echo ""; return 1; }

	TST=`grep -B ${i} android.intent.action.MAIN AndroidManifest.xml | grep -v android.intent.action.MAIN | grep android:name`

	#TODO: extract the value android:name properly!! Dont' commit & push this until this is FIXED!!!
	TST=`echo ${TST} | cut -d"=" -f2`
	echo ${TST//\"/}
	return 0
}

BUILD_TYPE="debug"

# parse the incoming parameters
usage="$0 [ -s <device1>,<device2>.. ] [ -a ] [ -i ] [ -r ] [ -t ] [ -h ]"
while getopts "hirs:t:" options; do
    case $options in
	i ) INSTALL="yes";;
        r ) LAUNCH="yes";;
        s ) DEVICES=${OPTARG};;
	t ) BUILD_TYPE=${OPTARG};;
        h ) echo ${usage}
	    echo "-i       skip building step, just install."
	    echo "-s       list of target devices (CB01,CB02). For all connected use \"all\"."
            echo "-r       run the app just after installing it."
            echo "-t       type of build: debug/release."
            echo "-h       print this message."
            exit 1;;
        * ) echo ${usage}
            exit 1;;
    esac
done

[ -z "${DEVICES}"  ] && die "ERROR: specify target devices.  Aborting."

if [ "${DEVICES}" == "all" ]; then
        DEVICES=`get_all_connected`
        [ -z "${DEVICES}" ] && die "ERROR: no devices connected. Aborting."
else
        DEVICES=${DEVICES//,/" "}
fi

[ "${BUILD_TYPE}" != "debug" -a "${BUILD_TYPE}" != "release" ] && die "ERROR: specify a valid build type: debug/release. Aborting."

# build the project
if [ -z "${INSTALL}" ]; then
	ant-dev ${BUILD_TYPE} || exit 1
else
	echo "Skip building the project..."
fi

# get the package name from the manifest
PKG_NAME=`extractAttributeXML AndroidManifest.xml /manifest package`

# iterate through all the devices
for dev in ${DEVICES}; do
        id=`name2id ${dev}`
        #verify the device name first
        if [ -z "${id}" ]; then
                echo "ERROR: device ${dev} does not exist in device.lst. Skipping device."
        else
		app=`ls bin/*-${BUILD_TYPE}.apk`
		echo "[${dev}] Installing ${app} (${BUILD_TYPE} version)..."
                OUT=`adbs ${id} install -r ${app}`
		# check if it failed because of inconsistent certificates.
		if [[ "${OUT}" == *INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES* ]]; then
			echo "[${dev}] UNINSTALLING app....."
			OUT=`adbs ${id} uninstall ${PKG_NAME}`
			[[ "${OUT}" == *Failure* ]] && { echo "[${dev}] ERROR: can't install ${app} (${BUILD_TYPE}). Is it a system app? Skipping device."; continue; }
			adbs ${id} install ${app}
		fi
		if [ "${LAUNCH}" == "yes" ]; then
			MAIN_ACTIVITY=`extractMainActivityName`
			[ $? -eq 0 ] && adbs ${id} shell am start -n ${PKG_NAME}/${MAIN_ACTIVITY}
		fi
        fi
done
