#!/bin/bash

# adbs: super adb
#
# GOAL:  allow to execute adb commands in multiple devices in an easy way.
# adbs does not care about the type of adb connection (USB or TCP). Also, adbs
# replaces the annoyinig serial numbers with device names.
#
# This script requires the device.lst (file that has all the info of one
# device: serial id, name, ip).
#
# author: Guillermo A. Nunez <guillermo@cozybit.com>

# source common functions and parse options
source `dirname ${0}`/common.sh

MYPID=${BASHPID}
prog=`basename $0`

usage() {
    cat <<EOF
Usage: $prog -s <DEVICE_SPEC> [ -p ] <adb_commands and options>

Options:
    -s <DEVICE_SPEC>       List of devices to use
    -p                     Run in parallel

Where DEVICE_SPEC can be
    - List of devices:     <device1>[,<device2>,<deviceN>,...]
    - All devices:         all
    - Range of devices:    <deviceN>:<deviceN+M>

Examples:

    $prog -s all install SomeThing.apk

    $prog -s CB01,CB05,CB06 shell cat /tmp/some/file.txt

    $prog -s CB10:CB15 -p shell am instrument -w tests/android.test.InstrumentationTestRunner
EOF
}

POS=0
while getopts "chs:p" opt; do
    case ${opt} in
        c ) CHECK="yes";;
        s ) DEVICES=${OPTARG};;
        p ) PARALLEL="yes";;
        h ) usage; exit 0;;
        * ) die "ERROR: invalid adbs option. Check the help (-h).";;
    esac
    POS=$((POS+1))
    [ -n "${OPTARG}" ] && POS=$((POS+1))
done

shift ${POS}
CMD=${*}

DEVICES=`expand_compressed_list ${DEVICES}` || die "ERROR: format of the devs list is not valid. Valid format: -s CB1,CB2:CB8 or -s all."
validate_dev_name_list ${DEVICES} || die "ERROR: the list of input devices is not valid (non-exitant dev? duplicated?)."

if [ -n "${CHECK}" ]; then
	_devs=`echo ${DEVICES} | wc -w`
	adbs -s ${DEVICES// /,} -p shell echo test &> /tmp/adbs-check-${MYPID}.out
	_responses=`cat /tmp/adbs-check-${MYPID}.out | grep -v adb | grep -w "test" | wc -l`
	if [ ${_devs} -ne ${_responses} ]; then
		echo "ERROR: next devices are not reachable:"
		cat /tmp/adbs-check-${MYPID}.out | grep -v "test"
		rm -f /tmp/adbs-check-${MYPID}.out &>/dev/null
		exit -1
	fi
	rm -f /tmp/adbs-check-${MYPID}.out &>/dev/null
fi

# iterate through all the devices
for dev in ${DEVICES}; do
        id=`name2id ${dev}`
        #verify the device name first
        if [ -z "${id}" ]; then
                logerr "Device ${dev} does not exist in device.lst. Device will be skipped."
        else
                if [ -n "${PARALLEL}" ]; then
			adb_agnostic ${id} ${CMD} &> /tmp/adb-parallel-${dev}-${MYPID}.out &
		else
			adb_agnostic ${id} ${CMD}
		fi
        fi
done

if [ -n "${PARALLEL}" ]; then
	# wait until all the adb_agnostic are done
	wait
	# print the logs secuentially
	for dev in ${DEVICES}; do
		cat /tmp/adb-parallel-${dev}-${MYPID}.out
		rm /tmp/adb-parallel-${dev}-${MYPID}.out &>/dev/null
	done
fi
